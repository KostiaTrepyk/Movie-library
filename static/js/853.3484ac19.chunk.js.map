{"version":3,"file":"static/js/853.3484ac19.chunk.js","mappings":"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","sources":["modules/MovieDescriptionModule/components/Loader.tsx","modules/MovieDescriptionModule/MovieDescription.module.tsx","modules/SeasonDescriptionModule/components/Error.tsx","modules/SeasonDescriptionModule/SeasonDescription.module.tsx","pages/DescriptionPage/DescriptionPage.tsx"],"sourcesContent":["import { Box, Divider, Skeleton, Stack } from \"@mui/material\";\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <Box sx={{ px: { md: 3, xs: 1 } }}>\r\n            {/* Title */}\r\n            <Skeleton variant=\"text\" sx={{ mx: \"auto\", width: \"min(95%, 300px)\", height: 50, mb: 1 }} />\r\n\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: { md: \"row\", xs: \"column\" },\r\n                    gap: 3,\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                {/* img */}\r\n                <Box>\r\n                    <Skeleton\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            height: { md: \"60vh\", xs: \"500px\" },\r\n                            width: { md: \"min(35vw, 400px)\", xs: \"min(100%, 400px)\" },\r\n                            mx: \"auto\",\r\n                        }}\r\n                    />\r\n                </Box>\r\n\r\n                {/* table */}\r\n                <Stack direction={\"column\"} spacing={1} flexGrow={1} divider={<Divider />}>\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"65%\", xs: \"80%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"50%\", xs: \"85%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"60%\", xs: \"90%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"55%\", xs: \"70%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"65%\", xs: \"80%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"50%\", xs: \"90%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"60%\", xs: \"60%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                </Stack>\r\n            </Box>\r\n\r\n            {/* Storyline */}\r\n            <Box mt={2}>\r\n                <Skeleton variant=\"text\" height={25} />\r\n                <Skeleton variant=\"text\" height={25} />\r\n                <Skeleton variant=\"text\" height={25} width={\"60%\"} />\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import { MovieApi1 } from \"../../services/MovieApi1\";\r\nimport { Box, Table, TableBody, TableCell, TableContainer, TableRow, Typography } from \"@mui/material\";\r\nimport React, { Fragment } from \"react\";\r\nimport Loader from \"./components/Loader\";\r\n\r\ninterface MovieDescriptionModuleProps {\r\n    movieId: string;\r\n}\r\n\r\nconst MovieDescriptionModule: React.FC<MovieDescriptionModuleProps> = ({ movieId }) => {\r\n    const { data, isError, isSuccess, isFetching } = MovieApi1.useGetByIdQuery(movieId, {});\r\n\r\n    const tableData = [\r\n        { name: \"Released:\", value: data?.Released },\r\n        { name: \"Actors:\", value: data?.Actors },\r\n        { name: \"Language\", value: data?.Language },\r\n        { name: \"Genre\", value: data?.Genre },\r\n        { name: \"Awards\", value: data?.Awards },\r\n        { name: \"Rated\", value: data?.Rated },\r\n        { name: \"Director\", value: data?.Director },\r\n        { name: \"Country\", value: data?.Country },\r\n        { name: \"Total seasons\", value: data?.totalSeasons },\r\n        { name: \"Writer\", value: data?.Writer },\r\n    ];\r\n\r\n    if (isFetching) {\r\n        return <Loader />;\r\n    }\r\n\r\n    if (isError) {\r\n        return (\r\n            <Typography variant=\"h4\" align=\"center\">\r\n                Network error! Try later.\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    if (isSuccess && data.Response === \"False\") {\r\n        return (\r\n            <Typography variant=\"h4\" align=\"center\">\r\n                Movie date not found!\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {data?.Response === \"True\" && (\r\n                <Box>\r\n                    {/* Title */}\r\n                    <Typography\r\n                        variant=\"h4\"\r\n                        sx={{\r\n                            textAlign: \"center\",\r\n                            fontSize: { md: \"3rem\", sm: \"2rem\", xs: \"1.7rem\" },\r\n                            mb: 2,\r\n                        }}\r\n                    >\r\n                        {data?.Title || \"Title\"} ({data?.Year || \"year\"})\r\n                    </Typography>\r\n                    <Box\r\n                        sx={{\r\n                            display: \"flex\",\r\n                            flexDirection: { md: \"row\", xs: \"column\" },\r\n                            gap: 2,\r\n                            mb: { sm: 2, xs: 0 },\r\n                            flexGrow: 1,\r\n                        }}\r\n                    >\r\n                        <img\r\n                            style={{\r\n                                width: \"min(100%, 400px)\",\r\n                                height: \"fit-content\",\r\n                                objectFit: \"contain\",\r\n                                borderRadius: \"8px\",\r\n                                margin: \"0 auto\",\r\n                            }}\r\n                            src={data?.Poster}\r\n                            alt={data?.Title}\r\n                            loading=\"lazy\"\r\n                        />\r\n\r\n                        <Box sx={{ flexGrow: 1 }}>\r\n                            {/* About */}\r\n                            <Typography\r\n                                variant=\"h5\"\r\n                                sx={{ textAlign: { md: \"start\", xs: \"center\" }, ml: { md: 2, xs: 0 } }}\r\n                            >\r\n                                About Film\r\n                            </Typography>\r\n                            <TableContainer>\r\n                                <Table aria-label=\"simple table\">\r\n                                    <TableBody>\r\n                                        {tableData.map((row, index) => (\r\n                                            <Fragment key={index}>\r\n                                                {row.value && row.value !== \"N/A\" && (\r\n                                                    <TableRow\r\n                                                        key={index}\r\n                                                        sx={{\r\n                                                            \"&:last-child td, &:last-child th\": { border: 0 },\r\n                                                        }}\r\n                                                    >\r\n                                                        <TableCell component=\"th\" scope=\"row\">\r\n                                                            {row.name}\r\n                                                        </TableCell>\r\n                                                        <TableCell>{row.value}</TableCell>\r\n                                                    </TableRow>\r\n                                                )}\r\n                                            </Fragment>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    {/* Plot */}\r\n                    {data?.Plot && data.Plot !== \"N/A\" && (\r\n                        <Box>\r\n                            <Typography variant=\"body1\">Storyline: {data.Plot}</Typography>\r\n                        </Box>\r\n                    )}\r\n                </Box>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MovieDescriptionModule;\r\n","import { Box, FormControl, InputLabel, MenuItem, Select, Typography } from \"@mui/material\";\r\n\r\nconst Error = () => {\r\n    return (\r\n        <Box sx={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\", gap: 2 }}>\r\n            <FormControl fullWidth disabled sx={{ width: \"70%\", maxWidth: \"490px\" }}>\r\n                <InputLabel>Season</InputLabel>\r\n                <Select value={1} label=\"Season\">\r\n                    <MenuItem value={1}>1</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n            <Typography>Ops. Error !!!</Typography>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Error;\r\n","import {\r\n    Box,\r\n    CircularProgress,\r\n    FormControl,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    SelectChangeEvent,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { MovieApi1 } from \"../../services/MovieApi1\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { SERIESEPISODEROUTE } from \"../../core/Router/utils/routes\";\r\nimport Error from \"./components/Error\";\r\n\r\ninterface SeasonDescriptionModuleProps {\r\n    movieId: string;\r\n}\r\n\r\nconst SeasonDescriptionModule: React.FC<SeasonDescriptionModuleProps> = ({ movieId }) => {\r\n    const [season, setSeason] = useState<number>(1);\r\n    const { currentData, data, isError } = MovieApi1.useGetSeasonQuery({ movieId, season }, {});\r\n\r\n    const navigate = useNavigate();\r\n\r\n    function changeSeasonHandler(e: SelectChangeEvent<number>) {\r\n        setSeason(() => +e.target.value);\r\n    }\r\n\r\n    function navigateToEpisode(episodeId: string) {\r\n        navigate(SERIESEPISODEROUTE.path.replace(\":id\", movieId).replace(\":episodeId\", episodeId));\r\n    }\r\n\r\n    if (isError) {\r\n        return <Error />;\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <Box sx={{ position: \"relative\", display: \"flex\", justifyContent: \"center\" }}>\r\n                <FormControl fullWidth disabled={!currentData} sx={{ width: \"70%\", maxWidth: \"490px\" }}>\r\n                    <InputLabel>Season</InputLabel>\r\n                    <Select value={season} label=\"Season\" onChange={changeSeasonHandler}>\r\n                        {data?.Episodes && data.Episodes.length > 0 ? (\r\n                            createMenuItems(Number(data?.totalSeasons))\r\n                        ) : (\r\n                            <MenuItem value={1}>1</MenuItem>\r\n                        )}\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                {!currentData && (\r\n                    <CircularProgress\r\n                        size={24}\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            top: \"50%\",\r\n                            left: \"50%\",\r\n                            marginTop: \"-12px\",\r\n                            marginLeft: \"-12px\",\r\n                        }}\r\n                    />\r\n                )}\r\n            </Box>\r\n\r\n            {data?.Response === \"True\" && (\r\n                <Box sx={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\", gap: 3, py: 2 }}>\r\n                    {data?.Episodes.map((episode) => (\r\n                        <Paper\r\n                            key={episode.Episode}\r\n                            sx={{\r\n                                boxSizing: \"border-box\",\r\n                                width: \"40%\",\r\n                                minWidth: 130,\r\n                                maxWidth: 200,\r\n                                p: 2,\r\n                                transition: \"0.3s transform\",\r\n                                \":hover\": {\r\n                                    transform: \"scale(105%)\",\r\n                                },\r\n                                cursor: \"pointer\",\r\n                            }}\r\n                            onClick={() => navigateToEpisode(episode.imdbID)}\r\n                            elevation={5}\r\n                        >\r\n                            <Typography sx={{ fontSize: { sm: \"1rem\", xs: \"0.75rem\" }, textAlign: \"center\" }}>\r\n                                {episode.Episode}. {episode.Title}\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: { sm: \"1rem\", xs: \"0.75rem\" }, textAlign: \"center\" }}>\r\n                                Released: {episode.Released}\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: { sm: \"1rem\", xs: \"0.75rem\" }, textAlign: \"center\" }}>\r\n                                Rating: {episode.imdbRating}\r\n                            </Typography>\r\n                        </Paper>\r\n                    ))}\r\n                </Box>\r\n            )}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default SeasonDescriptionModule;\r\n\r\nfunction createMenuItems(count: number): JSX.Element[] {\r\n    const result: JSX.Element[] = [];\r\n\r\n    for (let i = 1; i <= count; i++) {\r\n        result.push(\r\n            <MenuItem value={i} key={i}>\r\n                {i}\r\n            </MenuItem>\r\n        );\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { useParams } from \"react-router-dom\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { MovieApi1 } from \"../../services/MovieApi1\";\r\n\r\nimport MovieDescriptionModule from \"../../modules/MovieDescriptionModule/MovieDescription.module\";\r\nimport SeasonDescriptionModule from \"../../modules/SeasonDescriptionModule/SeasonDescription.module\";\r\n\r\nimport DefaultPageContainer from \"../../components/Containers/DefaultPageContainer\";\r\n\r\ntype Params = {\r\n    id: string;\r\n};\r\n\r\nconst FilmPage: React.FC = () => {\r\n    const params = useParams<Params>();\r\n\r\n    const { data } = MovieApi1.useGetByIdQuery(params.id || \"\", {});\r\n\r\n    return (\r\n        <DefaultPageContainer>\r\n            <Stack spacing={8}>\r\n                <MovieDescriptionModule movieId={params.id || \"\"} />\r\n\r\n                {data?.Type === \"series\" && <SeasonDescriptionModule movieId={params.id || \"\"} />}\r\n            </Stack>\r\n        </DefaultPageContainer>\r\n    );\r\n};\r\n\r\nexport default FilmPage;\r\n"],"names":["_jsxs","Box","sx","px","md","xs","children","_jsx","Skeleton","variant","mx","width","height","mb","display","flexDirection","gap","Stack","direction","spacing","flexGrow","divider","Divider","alignSelf","mt","_ref","movieId","_MovieApi1$useGetById","MovieApi1","useGetByIdQuery","data","isError","isSuccess","isFetching","tableData","name","value","Released","Actors","Language","Genre","Awards","Rated","Director","Country","totalSeasons","Writer","Loader","Typography","align","Response","_Fragment","textAlign","fontSize","sm","Title","Year","style","objectFit","borderRadius","margin","src","Poster","alt","loading","ml","TableContainer","Table","TableBody","map","row","index","Fragment","TableRow","border","TableCell","component","scope","Plot","alignItems","FormControl","fullWidth","disabled","maxWidth","InputLabel","Select","label","MenuItem","_useState","useState","_useState2","_slicedToArray","season","setSeason","_MovieApi1$useGetSeas","useGetSeasonQuery","currentData","navigate","useNavigate","Error","position","justifyContent","onChange","e","target","Episodes","length","createMenuItems","Number","CircularProgress","size","top","left","marginTop","marginLeft","flexWrap","py","episode","Paper","boxSizing","minWidth","p","transition","transform","cursor","onClick","episodeId","imdbID","SERIESEPISODEROUTE","path","replace","elevation","Episode","imdbRating","count","result","i","push","params","useParams","id","DefaultPageContainer","MovieDescriptionModule","Type","SeasonDescriptionModule"],"sourceRoot":""}