{"version":3,"file":"static/js/775.0afac33b.chunk.js","mappings":"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","sources":["sections/EpisodeDescriptionSection/components/Loader.tsx","sections/EpisodeDescriptionSection/EpisodeDescriptionSection.tsx","pages/EpisodePage/EpisodePage.tsx"],"sourcesContent":["import { Box, Divider, Skeleton, Stack } from \"@mui/material\";\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <Box sx={{ px: { md: 3, xs: 1 } }}>\r\n            {/* Title */}\r\n            <Skeleton variant=\"text\" sx={{ mx: \"auto\", width: \"min(95%, 300px)\", height: 50, mb: 1 }} />\r\n\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: { md: \"row\", xs: \"column\" },\r\n                    gap: 3,\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                {/* img */}\r\n                <Box>\r\n                    <Skeleton\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            height: { md: \"60vh\", xs: \"500px\" },\r\n                            width: { md: \"min(35vw, 400px)\", xs: \"min(100%, 400px)\" },\r\n                            mx: \"auto\",\r\n                        }}\r\n                    />\r\n                </Box>\r\n\r\n                {/* table */}\r\n                <Stack direction={\"column\"} spacing={1} flexGrow={1} divider={<Divider />}>\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"65%\", xs: \"80%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"50%\", xs: \"85%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"60%\", xs: \"90%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"55%\", xs: \"70%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"65%\", xs: \"80%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"50%\", xs: \"90%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"60%\", xs: \"60%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                </Stack>\r\n            </Box>\r\n\r\n            {/* Storyline */}\r\n            <Box mt={2}>\r\n                <Skeleton variant=\"text\" height={25} />\r\n                <Skeleton variant=\"text\" height={25} />\r\n                <Skeleton variant=\"text\" height={25} width={\"60%\"} />\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import { Fragment } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    IconButton,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { motion } from \"framer-motion\";\r\nimport { UserContext } from \"../../core/contexts/User/UserContext\";\r\nimport { MovieApi1 } from \"../../services/MovieApi1\";\r\n\r\nimport Loader from \"./components/Loader\";\r\n\r\n/* Icons */\r\nimport ArrowBack from \"@mui/icons-material/ArrowBackIosNew\";\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBackIosNew\";\r\n\r\n/* Framer motion animations */\r\nconst titleAnimation = {\r\n    hidden: {\r\n        scale: 0.95,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        scale: 1,\r\n        opacity: 1,\r\n    },\r\n};\r\nconst imgAnimation = {\r\n    hidden: {\r\n        x: -30,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        x: 0,\r\n        opacity: 1,\r\n    },\r\n};\r\nconst tableAnimation = {\r\n    hidden: {\r\n        x: 30,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        x: 0,\r\n        opacity: 1,\r\n    },\r\n};\r\nconst plotAnimation = {\r\n    hidden: {\r\n        x: -30,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        x: 0,\r\n        opacity: 1,\r\n    },\r\n};\r\n\r\n/* Framer motion components */\r\nconst MBox = motion(Box);\r\nconst MTypography = motion(Typography);\r\n\r\ninterface EpisodeDescriptionSectionProps {\r\n    episodeId: string;\r\n}\r\n\r\nconst EpisodeDescriptionSection: React.FC<EpisodeDescriptionSectionProps> = ({ episodeId }) => {\r\n    const { currentData, isFetching, isError } = MovieApi1.useGetEpisodeQuery(episodeId);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const tableData = [\r\n        { name: \"Released:\", value: currentData?.Released },\r\n        { name: \"Country\", value: currentData?.Country },\r\n        { name: \"Language\", value: currentData?.Language },\r\n        { name: \"Genre\", value: currentData?.Genre },\r\n        { name: \"Director\", value: currentData?.Director },\r\n        { name: \"Writer\", value: currentData?.Writer },\r\n        { name: \"Actors:\", value: currentData?.Actors },\r\n        { name: \"Rated\", value: currentData?.Rated },\r\n        { name: \"Awards\", value: currentData?.Awards },\r\n    ];\r\n\r\n    if (isFetching) {\r\n        return <Loader />;\r\n    }\r\n\r\n    if (isError) {\r\n        return (\r\n            <Box>\r\n                {/* Fix me ? */}\r\n                <IconButton\r\n                    size=\"large\"\r\n                    color=\"inherit\"\r\n                    onClick={() => {\r\n                        navigate(-1);\r\n                    }}\r\n                >\r\n                    <ArrowBackIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h4\" align=\"center\">\r\n                    Server Error\r\n                </Typography>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    if (currentData?.Response === \"False\") {\r\n        return (\r\n            <Box>\r\n                {/* Fix me ? */}\r\n                <Button\r\n                    size=\"large\"\r\n                    color=\"inherit\"\r\n                    onClick={() => {\r\n                        console.log(\"Fix me\");\r\n                    }}\r\n                >\r\n                    <ArrowBackIcon sx={{ mr: 1 }} />\r\n                    <Typography variant=\"h6\">Back</Typography>\r\n                </Button>\r\n                <Typography variant=\"h4\" align=\"center\">\r\n                    Episode not found\r\n                </Typography>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* Title */}\r\n            <Box sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"start\" }}>\r\n                <UserContext.Consumer>\r\n                    {({ deviceType }) => (\r\n                        <>\r\n                            {deviceType === \"PC\" && (\r\n                                <IconButton onClick={() => navigate(-1)} size=\"large\">\r\n                                    <ArrowBack />\r\n                                </IconButton>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </UserContext.Consumer>\r\n\r\n                <MTypography\r\n                    initial=\"hidden\"\r\n                    whileInView=\"visible\"\r\n                    viewport={{ once: true }}\r\n                    variants={titleAnimation}\r\n                    variant=\"h4\"\r\n                    sx={{\r\n                        flexGrow: 1,\r\n                        textAlign: \"center\",\r\n                        fontSize: { md: \"3rem\", sm: \"2rem\", xs: \"1.7rem\" },\r\n                        mb: 2,\r\n                    }}\r\n                >\r\n                    {currentData?.Title || \"Title\"} ({currentData?.Year || \"year\"})\r\n                </MTypography>\r\n            </Box>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: { md: \"row\", xs: \"column\" },\r\n                    overflowX: \"hidden\" /* !!! */,\r\n                    gap: 2,\r\n                    mb: { sm: 2, xs: 0 },\r\n                    flexGrow: 1,\r\n                }}\r\n            >\r\n                <motion.img\r\n                    initial=\"hidden\"\r\n                    whileInView=\"visible\"\r\n                    viewport={{ once: true }}\r\n                    variants={imgAnimation}\r\n                    style={{\r\n                        width: \"min(100%, 400px)\",\r\n                        height: \"fit-content\",\r\n                        objectFit: \"contain\",\r\n                        borderRadius: \"8px\",\r\n                        margin: \"0 auto\",\r\n                    }}\r\n                    src={currentData?.Poster}\r\n                    alt={currentData?.Title}\r\n                    loading=\"lazy\"\r\n                />\r\n\r\n                <MBox\r\n                    initial=\"hidden\"\r\n                    whileInView=\"visible\"\r\n                    viewport={{ once: true }}\r\n                    variants={tableAnimation}\r\n                    sx={{ flexGrow: 1 }}\r\n                >\r\n                    {/* About */}\r\n                    <Typography\r\n                        variant=\"h5\"\r\n                        sx={{ textAlign: { md: \"start\", xs: \"center\" }, ml: { md: 2, xs: 0 } }}\r\n                    >\r\n                        About Film\r\n                    </Typography>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableBody>\r\n                                {tableData.map((row, index) => (\r\n                                    <Fragment key={index}>\r\n                                        {row.value && row.value !== \"N/A\" && (\r\n                                            <TableRow\r\n                                                key={index}\r\n                                                sx={{\r\n                                                    \"&:last-child td, &:last-child th\": { border: 0 },\r\n                                                }}\r\n                                            >\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {row.name}\r\n                                                </TableCell>\r\n                                                <TableCell>{row.value}</TableCell>\r\n                                            </TableRow>\r\n                                        )}\r\n                                    </Fragment>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </MBox>\r\n            </Box>\r\n\r\n            {/* Plot */}\r\n            {currentData?.Plot && currentData.Plot !== \"N/A\" && (\r\n                <MBox\r\n                    initial=\"hidden\"\r\n                    whileInView=\"visible\"\r\n                    viewport={{ once: true, margin: \"-40px\" }}\r\n                    variants={plotAnimation}\r\n                >\r\n                    <Typography variant=\"body1\">Storyline: {currentData.Plot}</Typography>\r\n                </MBox>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EpisodeDescriptionSection;\r\n","import { useParams } from \"react-router-dom\";\r\n\r\nimport EpisodeDescriptionSection from \"../../sections/EpisodeDescriptionSection/EpisodeDescriptionSection\";\r\n\r\nimport DefaultPageContainer from \"../../components/Containers/DefaultPageContainer\";\r\n\r\nconst SeriesEpisodePage: React.FC = () => {\r\n    const params = useParams<{ episodeId: string }>();\r\n\r\n    return (\r\n        <DefaultPageContainer>\r\n            <EpisodeDescriptionSection episodeId={params.episodeId || \"\"} />\r\n        </DefaultPageContainer>\r\n    );\r\n};\r\n\r\nexport default SeriesEpisodePage;\r\n"],"names":["_jsxs","Box","sx","px","md","xs","children","_jsx","Skeleton","variant","mx","width","height","mb","display","flexDirection","gap","Stack","direction","spacing","flexGrow","divider","Divider","alignSelf","mt","titleAnimation","hidden","scale","opacity","visible","imgAnimation","x","tableAnimation","plotAnimation","MBox","motion","MTypography","Typography","_ref","episodeId","_MovieApi1$useGetEpis","MovieApi1","useGetEpisodeQuery","currentData","isFetching","isError","navigate","useNavigate","tableData","name","value","Released","Country","Language","Genre","Director","Writer","Actors","Rated","Awards","Loader","IconButton","size","color","onClick","ArrowBackIcon","align","Response","Button","console","log","mr","_Fragment","justifyContent","alignItems","UserContext","Consumer","_ref2","deviceType","ArrowBack","initial","whileInView","viewport","once","variants","textAlign","fontSize","sm","Title","Year","overflowX","img","style","objectFit","borderRadius","margin","src","Poster","alt","loading","ml","TableContainer","Table","TableBody","map","row","index","Fragment","TableRow","border","TableCell","component","scope","Plot","params","useParams","DefaultPageContainer","EpisodeDescriptionSection"],"sourceRoot":""}