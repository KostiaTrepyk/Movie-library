{"version":3,"file":"static/js/853.0fa56a92.chunk.js","mappings":"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","sources":["modules/MovieDescriptionModule/components/Loader.tsx","modules/MovieDescriptionModule/MovieDescription.module.tsx","modules/SeasonDescriptionModule/components/Error.tsx","modules/SeasonDescriptionModule/SeasonDescription.module.tsx","pages/DescriptionPage/DescriptionPage.tsx"],"sourcesContent":["import { Box, Divider, Skeleton, Stack } from \"@mui/material\";\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <Box sx={{ px: { md: 3, xs: 1 } }}>\r\n            {/* Title */}\r\n            <Skeleton variant=\"text\" sx={{ mx: \"auto\", width: \"min(95%, 300px)\", height: 50, mb: 1 }} />\r\n\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: { md: \"row\", xs: \"column\" },\r\n                    gap: 3,\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                {/* img */}\r\n                <Box>\r\n                    <Skeleton\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            height: { md: \"60vh\", xs: \"500px\" },\r\n                            width: { md: \"min(35vw, 400px)\", xs: \"min(100%, 400px)\" },\r\n                            mx: \"auto\",\r\n                        }}\r\n                    />\r\n                </Box>\r\n\r\n                {/* table */}\r\n                <Stack direction={\"column\"} spacing={1} flexGrow={1} divider={<Divider />}>\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"65%\", xs: \"80%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"50%\", xs: \"85%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"60%\", xs: \"90%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"55%\", xs: \"70%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"65%\", xs: \"80%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"50%\", xs: \"90%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"60%\", xs: \"60%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                </Stack>\r\n            </Box>\r\n\r\n            {/* Storyline */}\r\n            <Box mt={2}>\r\n                <Skeleton variant=\"text\" height={25} />\r\n                <Skeleton variant=\"text\" height={25} />\r\n                <Skeleton variant=\"text\" height={25} width={\"60%\"} />\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { Fragment } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n    Box,\r\n    IconButton,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { motion } from \"framer-motion\";\r\nimport { MovieApi1 } from \"../../services/MovieApi1\";\r\nimport Loader from \"./components/Loader\";\r\nimport { LocalstorageKeys } from \"../../utils/localstorage_keys\";\r\nimport { useLocalStorage } from \"../../core/hooks/useLocalStorage\";\r\nimport { detectMob } from \"../../helpers/detectMobile\";\r\n\r\n/* Icons */\r\nimport ArrowBack from \"@mui/icons-material/ArrowBackIosNew\";\r\n\r\n/* Framer motion animations */\r\nconst titleAnimation = {\r\n    hidden: {\r\n        scale: 0.95,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        scale: 1,\r\n        opacity: 1,\r\n    },\r\n};\r\nconst imgAnimation = {\r\n    hidden: {\r\n        x: -30,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        x: 0,\r\n        opacity: 1,\r\n    },\r\n};\r\nconst tableAnimation = {\r\n    hidden: {\r\n        x: 30,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        x: 0,\r\n        opacity: 1,\r\n    },\r\n};\r\nconst plotAnimation = {\r\n    hidden: {\r\n        x: -30,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        x: 0,\r\n        opacity: 1,\r\n    },\r\n};\r\n\r\n/* Framer motion components */\r\nconst MBox = motion(Box);\r\nconst MTypography = motion(Typography);\r\n\r\ninterface MovieDescriptionModuleProps {\r\n    movieId: string;\r\n}\r\n\r\nconst MovieDescriptionModule: React.FC<MovieDescriptionModuleProps> = ({ movieId }) => {\r\n    const [isMobile] = useLocalStorage(LocalstorageKeys.isMbile, detectMob());\r\n    const { currentData, isError, isSuccess, isFetching } = MovieApi1.useGetByIdQuery(movieId, {});\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const tableData = [\r\n        { name: \"Released:\", value: currentData?.Released },\r\n        { name: \"Actors:\", value: currentData?.Actors },\r\n        { name: \"Language\", value: currentData?.Language },\r\n        { name: \"Genre\", value: currentData?.Genre },\r\n        { name: \"Awards\", value: currentData?.Awards },\r\n        { name: \"Rated\", value: currentData?.Rated },\r\n        {\r\n            name: \"Ratings\",\r\n            value: currentData?.Ratings.map(({ Source, Value }) => Source + \": \" + Value).join(\", \"),\r\n        },\r\n        { name: \"Director\", value: currentData?.Director },\r\n        { name: \"Country\", value: currentData?.Country },\r\n        { name: \"Total seasons\", value: currentData?.totalSeasons },\r\n        { name: \"Writer\", value: currentData?.Writer },\r\n        { name: \"Metascore\", value: currentData?.Metascore },\r\n    ];\r\n\r\n    if (isFetching) {\r\n        return <Loader />;\r\n    }\r\n\r\n    if (isError) {\r\n        return (\r\n            <Typography variant=\"h4\" align=\"center\">\r\n                Network error! Try later.\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    if (isSuccess && currentData.Response === \"False\") {\r\n        return (\r\n            <Typography variant=\"h4\" align=\"center\">\r\n                Movie date not found!\r\n            </Typography>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {currentData?.Response === \"True\" && (\r\n                <Box>\r\n                    {/* Title */}\r\n                    <MBox\r\n                        initial=\"hidden\"\r\n                        whileInView=\"visible\"\r\n                        viewport={{ once: true }}\r\n                        variants={titleAnimation}\r\n                        sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"start\" }}\r\n                    >\r\n                        {!isMobile && (\r\n                            <IconButton onClick={() => navigate(-1)} size={\"large\"}>\r\n                                <ArrowBack />\r\n                            </IconButton>\r\n                        )}\r\n\r\n                        <MTypography\r\n                            variants={titleAnimation}\r\n                            variant=\"h4\"\r\n                            sx={{\r\n                                flexGrow: 1,\r\n                                textAlign: \"center\",\r\n                                fontSize: { md: \"3rem\", sm: \"2rem\", xs: \"1.7rem\" },\r\n                                mb: 2,\r\n                            }}\r\n                        >\r\n                            {currentData?.Title || \"Title\"} ({currentData?.Year || \"year\"})\r\n                        </MTypography>\r\n                    </MBox>\r\n\r\n                    <Box\r\n                        sx={{\r\n                            display: \"flex\",\r\n                            flexDirection: { md: \"row\", xs: \"column\" },\r\n                            gap: 2,\r\n                            mb: { sm: 2, xs: 0 },\r\n                            flexGrow: 1,\r\n                        }}\r\n                    >\r\n                        <motion.img\r\n                            initial=\"hidden\"\r\n                            whileInView=\"visible\"\r\n                            viewport={{ once: true }}\r\n                            variants={imgAnimation}\r\n                            style={{\r\n                                width: \"min(100%, 400px)\",\r\n                                height: \"fit-content\",\r\n                                objectFit: \"contain\",\r\n                                borderRadius: \"8px\",\r\n                                margin: \"0 auto\",\r\n                            }}\r\n                            src={currentData?.Poster}\r\n                            alt={currentData?.Title}\r\n                            loading=\"lazy\"\r\n                        />\r\n\r\n                        <MBox\r\n                            initial=\"hidden\"\r\n                            whileInView=\"visible\"\r\n                            viewport={{ once: true }}\r\n                            variants={tableAnimation}\r\n                            sx={{ flexGrow: 1 }}\r\n                        >\r\n                            {/* About */}\r\n                            <Typography\r\n                                variant=\"h5\"\r\n                                sx={{ textAlign: { md: \"start\", xs: \"center\" }, ml: { md: 2, xs: 0 } }}\r\n                            >\r\n                                About Film\r\n                            </Typography>\r\n                            <TableContainer>\r\n                                <Table aria-label=\"simple table\">\r\n                                    <TableBody>\r\n                                        {tableData.map((row, index) => (\r\n                                            <Fragment key={index}>\r\n                                                {row.value && row.value !== \"N/A\" && (\r\n                                                    <TableRow\r\n                                                        key={index}\r\n                                                        sx={{\r\n                                                            \"&:last-child td, &:last-child th\": { border: 0 },\r\n                                                        }}\r\n                                                    >\r\n                                                        <TableCell component=\"th\" scope=\"row\">\r\n                                                            {row.name}\r\n                                                        </TableCell>\r\n                                                        <TableCell>{row.value}</TableCell>\r\n                                                    </TableRow>\r\n                                                )}\r\n                                            </Fragment>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </MBox>\r\n                    </Box>\r\n\r\n                    {/* Plot */}\r\n                    {currentData?.Plot && currentData.Plot !== \"N/A\" && (\r\n                        <MBox\r\n                            initial=\"hidden\"\r\n                            whileInView=\"visible\"\r\n                            viewport={{ once: true, margin: \"-40px\" }}\r\n                            variants={plotAnimation}\r\n                        >\r\n                            <Typography variant=\"body1\">Storyline: {currentData.Plot}</Typography>\r\n                        </MBox>\r\n                    )}\r\n                </Box>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MovieDescriptionModule;\r\n","import { Box, FormControl, InputLabel, MenuItem, Select, Typography } from \"@mui/material\";\r\n\r\nconst Error = () => {\r\n    return (\r\n        <Box sx={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\", gap: 2 }}>\r\n            <FormControl fullWidth disabled sx={{ width: \"70%\", maxWidth: \"490px\" }}>\r\n                <InputLabel>Season</InputLabel>\r\n                <Select value={1} label=\"Season\">\r\n                    <MenuItem value={1}>1</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n            <Typography>Ops. Error !!!</Typography>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Error;\r\n","import {\r\n    Box,\r\n    CircularProgress,\r\n    FormControl,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    SelectChangeEvent,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { MovieApi1 } from \"../../services/MovieApi1\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { SERIESEPISODEROUTE } from \"../../core/Router/utils/routes\";\r\nimport Error from \"./components/Error\";\r\n\r\ninterface SeasonDescriptionModuleProps {\r\n    movieId: string;\r\n}\r\n\r\nconst SeasonDescriptionModule: React.FC<SeasonDescriptionModuleProps> = ({ movieId }) => {\r\n    const [season, setSeason] = useState<number>(1);\r\n    const { currentData, data, isError } = MovieApi1.useGetSeasonQuery({ movieId, season }, {});\r\n\r\n    const navigate = useNavigate();\r\n\r\n    function changeSeasonHandler(e: SelectChangeEvent<number>) {\r\n        setSeason(() => +e.target.value);\r\n    }\r\n\r\n    function navigateToEpisode(episodeId: string) {\r\n        navigate(SERIESEPISODEROUTE.path.replace(\":id\", movieId).replace(\":episodeId\", episodeId));\r\n    }\r\n\r\n    if (isError) {\r\n        return <Error />;\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <Box sx={{ position: \"relative\", display: \"flex\", justifyContent: \"center\" }}>\r\n                <FormControl fullWidth disabled={!currentData} sx={{ width: \"70%\", maxWidth: \"490px\" }}>\r\n                    <InputLabel>Season</InputLabel>\r\n                    <Select value={season} label=\"Season\" onChange={changeSeasonHandler}>\r\n                        {data?.Episodes && data.Episodes.length > 0 ? (\r\n                            createMenuItems(Number(data?.totalSeasons))\r\n                        ) : (\r\n                            <MenuItem value={1}>1</MenuItem>\r\n                        )}\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                {!currentData && (\r\n                    <CircularProgress\r\n                        size={24}\r\n                        sx={{\r\n                            position: \"absolute\",\r\n                            top: \"50%\",\r\n                            left: \"50%\",\r\n                            marginTop: \"-12px\",\r\n                            marginLeft: \"-12px\",\r\n                        }}\r\n                    />\r\n                )}\r\n            </Box>\r\n\r\n            {data?.Response === \"True\" && (\r\n                <Box sx={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\", gap: 3, py: 2 }}>\r\n                    {data?.Episodes.map((episode) => (\r\n                        <Paper\r\n                            key={episode.Episode}\r\n                            sx={{\r\n                                boxSizing: \"border-box\",\r\n                                width: \"40%\",\r\n                                minWidth: 130,\r\n                                maxWidth: 200,\r\n                                p: 2,\r\n                                transition: \"0.3s transform\",\r\n                                \":hover\": {\r\n                                    transform: \"scale(105%)\",\r\n                                },\r\n                                cursor: \"pointer\",\r\n                            }}\r\n                            onClick={() => navigateToEpisode(episode.imdbID)}\r\n                            elevation={5}\r\n                        >\r\n                            <Typography sx={{ fontSize: { sm: \"1rem\", xs: \"0.75rem\" }, textAlign: \"center\" }}>\r\n                                {episode.Episode}. {episode.Title}\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: { sm: \"1rem\", xs: \"0.75rem\" }, textAlign: \"center\" }}>\r\n                                Released: {episode.Released}\r\n                            </Typography>\r\n                            <Typography sx={{ fontSize: { sm: \"1rem\", xs: \"0.75rem\" }, textAlign: \"center\" }}>\r\n                                Rating: {episode.imdbRating}\r\n                            </Typography>\r\n                        </Paper>\r\n                    ))}\r\n                </Box>\r\n            )}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default SeasonDescriptionModule;\r\n\r\nfunction createMenuItems(count: number): JSX.Element[] {\r\n    const result: JSX.Element[] = [];\r\n\r\n    for (let i = 1; i <= count; i++) {\r\n        result.push(\r\n            <MenuItem value={i} key={i}>\r\n                {i}\r\n            </MenuItem>\r\n        );\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { useParams } from \"react-router-dom\";\r\nimport { Stack } from \"@mui/material\";\r\nimport { MovieApi1 } from \"../../services/MovieApi1\";\r\n\r\nimport MovieDescriptionModule from \"../../modules/MovieDescriptionModule/MovieDescription.module\";\r\nimport SeasonDescriptionModule from \"../../modules/SeasonDescriptionModule/SeasonDescription.module\";\r\n\r\nimport DefaultPageContainer from \"../../components/Containers/DefaultPageContainer\";\r\n\r\ntype Params = {\r\n    id: string;\r\n};\r\n\r\nconst FilmPage: React.FC = () => {\r\n    const params = useParams<Params>();\r\n\r\n    const { data } = MovieApi1.useGetByIdQuery(params.id || \"\", {});\r\n\r\n    return (\r\n        <DefaultPageContainer>\r\n            <Stack spacing={8}>\r\n                <MovieDescriptionModule movieId={params.id || \"\"} />\r\n\r\n                {data?.Type === \"series\" && <SeasonDescriptionModule movieId={params.id || \"\"} />}\r\n            </Stack>\r\n        </DefaultPageContainer>\r\n    );\r\n};\r\n\r\nexport default FilmPage;\r\n"],"names":["_jsxs","Box","sx","px","md","xs","children","_jsx","Skeleton","variant","mx","width","height","mb","display","flexDirection","gap","Stack","direction","spacing","flexGrow","divider","Divider","alignSelf","mt","titleAnimation","hidden","scale","opacity","visible","imgAnimation","x","tableAnimation","plotAnimation","MBox","motion","MTypography","Typography","_ref","movieId","_useLocalStorage","useLocalStorage","LocalstorageKeys","isMbile","detectMob","isMobile","_slicedToArray","_MovieApi1$useGetById","MovieApi1","useGetByIdQuery","currentData","isError","isSuccess","isFetching","navigate","useNavigate","tableData","name","value","Released","Actors","Language","Genre","Awards","Rated","Ratings","map","_ref2","Source","Value","join","Director","Country","totalSeasons","Writer","Metascore","Loader","align","Response","_Fragment","initial","whileInView","viewport","once","variants","justifyContent","alignItems","IconButton","onClick","size","ArrowBack","textAlign","fontSize","sm","Title","Year","img","style","objectFit","borderRadius","margin","src","Poster","alt","loading","ml","TableContainer","Table","TableBody","row","index","Fragment","TableRow","border","TableCell","component","scope","Plot","FormControl","fullWidth","disabled","maxWidth","InputLabel","Select","label","MenuItem","_useState","useState","_useState2","season","setSeason","_MovieApi1$useGetSeas","useGetSeasonQuery","data","Error","position","onChange","e","target","Episodes","length","createMenuItems","Number","CircularProgress","top","left","marginTop","marginLeft","flexWrap","py","episode","Paper","boxSizing","minWidth","p","transition","transform","cursor","episodeId","imdbID","SERIESEPISODEROUTE","path","replace","elevation","Episode","imdbRating","count","result","i","push","params","useParams","id","DefaultPageContainer","MovieDescriptionModule","Type","SeasonDescriptionModule"],"sourceRoot":""}