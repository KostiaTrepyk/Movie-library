{"version":3,"file":"static/js/761.59c469fa.chunk.js","mappings":"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","sources":["modules/SearchModule/Search.module.tsx","helpers/objToSearchParams.tsx","components/MovieList/components/MovieItem.tsx","components/MovieList/MovieList.tsx","pages/SearchPage/SearchPage.tsx","helpers/getObjFromSearchParams.ts"],"sourcesContent":["import {\r\n    Box,\r\n    CircularProgress,\r\n    FormControl,\r\n    IconButton,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { SEARCHROUTE } from \"../../core/Router/utils/routes\";\r\nimport { objToSearchParams } from \"../../helpers/objToSearchParams\";\r\n\r\n/* Icons */\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\n\r\ninterface SearchModuleProps {\r\n    isLoading?: boolean;\r\n}\r\n\r\nconst SearchModule: React.FC<SearchModuleProps> = ({ isLoading }) => {\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [year, setYear] = useState<string>(\"\");\r\n    const [type, setType] = useState<string>(\"\");\r\n\r\n    const navigate = useNavigate();\r\n\r\n    function formSubmitHandler(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        if (title.length === 0) return;\r\n\r\n        const query = objToSearchParams({ title: title.trim().toLowerCase(), year, type });\r\n        navigate(SEARCHROUTE.path + \"/\" + query);\r\n    }\r\n\r\n    return (\r\n        <Paper\r\n            sx={{\r\n                px: { sm: 6, xs: 3 },\r\n                pt: { sm: 5, xs: 3 },\r\n                pb: { sm: 6, xs: 4 },\r\n                borderRadius: 2,\r\n                width: \"fit-content\",\r\n                mx: \"auto\",\r\n                position: \"relative\",\r\n            }}\r\n            elevation={5}\r\n        >\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    maxWidth: \"450px\",\r\n                    mx: \"auto\",\r\n                    gap: { sm: 3, xs: 2 },\r\n                }}\r\n                component={\"form\"}\r\n                onSubmit={formSubmitHandler}\r\n            >\r\n                <Typography\r\n                    variant=\"body1\"\r\n                    sx={{ fontSize: { md: \"2rem\", sm: \"1.75rem\", xs: \"1.5rem\", textAlign: \"center\" } }}\r\n                >\r\n                    Let's find some Movies\r\n                </Typography>\r\n\r\n                {/* Title input */}\r\n                <TextField\r\n                    label=\"Title\"\r\n                    InputProps={{\r\n                        onChange: (e) => setTitle(() => e.target.value),\r\n                        value: title,\r\n                        autoComplete: \"off\",\r\n                        disabled: isLoading,\r\n                        inputMode: \"search\",\r\n                        endAdornment: Boolean(title) && (\r\n                            <IconButton\r\n                                onClick={() => {\r\n                                    setTitle(() => \"\");\r\n                                }}\r\n                            >\r\n                                <ClearIcon />\r\n                            </IconButton>\r\n                        ),\r\n                    }}\r\n                    inputProps={{\r\n                        pattern: \".{3,}\",\r\n                        title: \"Three or more characters.\",\r\n                    }}\r\n                ></TextField>\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: \"flex\",\r\n                        flexWrap: \"wrap\",\r\n                        gap: { sm: 2, xs: 1 },\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    {/* Year input */}\r\n                    <TextField\r\n                        label=\"Year\"\r\n                        sx={{ flexGrow: 1 }}\r\n                        InputProps={{\r\n                            inputMode: \"numeric\",\r\n                            onChange: (e) => setYear(() => e.target.value),\r\n                            value: year,\r\n                            autoComplete: \"off\",\r\n                            disabled: isLoading,\r\n                        }}\r\n                        inputProps={{\r\n                            pattern: \"[0-9]{4}\",\r\n                            title: \"Check the year.\",\r\n                        }}\r\n                    ></TextField>\r\n\r\n                    {/* Type input */}\r\n                    <FormControl sx={{ flexGrow: 2, minWidth: \"90px\" }} disabled={isLoading}>\r\n                        <InputLabel>Type</InputLabel>\r\n                        <Select\r\n                            label=\"Type\"\r\n                            sx={{ px: 1 }}\r\n                            value={type}\r\n                            onChange={(e) => setType(() => e.target.value)}\r\n                        >\r\n                            <MenuItem value={\"\"}>Empty</MenuItem>\r\n                            <MenuItem value={\"movie\"}>Movie</MenuItem>\r\n                            <MenuItem value={\"series\"}>Series</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    {/* SubmitBtn */}\r\n                    <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                        <IconButton size=\"large\" type=\"submit\" disabled={isLoading}>\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n\r\n            {/* Loader */}\r\n            {isLoading && (\r\n                <CircularProgress\r\n                    size={24}\r\n                    sx={{ position: \"absolute\", top: \"50%\", left: \"50%\", mt: \"-12px\", ml: \"-12px\" }}\r\n                />\r\n            )}\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default SearchModule;\r\n","export function objToSearchParams(obj: Record<string, string | number>): string {\r\n    let query: string = \"?\";\r\n\r\n    for (const name in obj) {\r\n        if (obj[name]) {\r\n            query += `${name}=${obj[name]}&`;\r\n        }\r\n    }\r\n    query = query.slice(0, query.length - 1);\r\n\r\n    return query;\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport { orange, grey } from \"@mui/material/colors\";\r\nimport { ShortMovieData } from \"../../../models/MovieData\";\r\n\r\ninterface MovieItemProps {\r\n    movieData: ShortMovieData;\r\n    onClick: (moiveId: string) => void;\r\n}\r\n\r\nconst MovieItem: React.FC<MovieItemProps> = ({ movieData, onClick }) => {\r\n    return (\r\n        <Box\r\n            key={movieData.imdbID}\r\n            sx={{\r\n                boxSizing: \"border-box\",\r\n                px: 3,\r\n                py: 2,\r\n                cursor: \"pointer\",\r\n                width: \"min(100%, 340px)\",\r\n                transition: \"0.3s transform\",\r\n                \"&:hover\": {\r\n                    transform: \"scale(95%)\",\r\n                },\r\n            }}\r\n            onClick={() => onClick(movieData.imdbID)}\r\n        >\r\n            <img\r\n                src={\r\n                    movieData.Poster !== \"N/A\"\r\n                        ? movieData.Poster\r\n                        : \"https://thumbs.dreamstime.com/b/ikona-paska-filmu-film-programu-word-wyizolowany-na-bia%C5%82ym-tle-proste-logo-wektorowe-230410953.jpg\"\r\n                }\r\n                alt={movieData.Title}\r\n                style={{\r\n                    width: \"100%\",\r\n                    borderRadius: \"15px 15px 10px 10px\",\r\n                    aspectRatio: 9 / 14,\r\n                    objectFit: \"cover\",\r\n                    backgroundRepeat: \"no-repeat\",\r\n                }}\r\n                loading=\"lazy\"\r\n            />\r\n\r\n            <Box sx={{ display: \"flex\", textAlign: \"center\", pt: 1, gap: 2 }}>\r\n                <Typography flexGrow={1}>\r\n                    {movieData.Title} {movieData.Year}\r\n                </Typography>\r\n                <Typography\r\n                    bgcolor={grey[800]}\r\n                    color={orange[600]}\r\n                    variant=\"body2\"\r\n                    sx={{ py: 0.8, px: 1, height: \"min-content\", borderRadius: 2 }}\r\n                >\r\n                    {movieData.Type.toUpperCase()}\r\n                </Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MovieItem;\r\n","import { Box } from \"@mui/material\";\r\nimport { ShortMovieData } from \"../../models/MovieData\";\r\n\r\nimport MovieItem from \"./components/MovieItem\";\r\n\r\ninterface MovieListProps {\r\n    movies: ShortMovieData[];\r\n    onMovieClick: (movieID: string) => void;\r\n}\r\n\r\nconst MovieList: React.FC<MovieListProps> = ({ movies, onMovieClick }) => {\r\n    return (\r\n        <Box\r\n            sx={{\r\n                display: \"flex\",\r\n                flexWrap: \"wrap\",\r\n                justifyContent: \"center\",\r\n                gap: { lg: 2, xs: 1 },\r\n            }}\r\n        >\r\n            {movies.map((movie) => (\r\n                <MovieItem movieData={movie} onClick={onMovieClick} key={movie.imdbID} />\r\n            ))}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MovieList;\r\n","import { useLayoutEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Box, Container, Pagination, Typography } from \"@mui/material\";\r\nimport { DESCRIPTIONROUTE } from \"../../core/Router/utils/routes\";\r\nimport { MovieApi } from \"../../services/Movie\";\r\n\r\nimport { getObjFromSearchParams } from \"../../helpers/getObjFromSearchParams\";\r\n\r\nimport SearchModule from \"../../modules/SearchModule/Search.module\";\r\nimport MovieList from \"../../components/MovieList/MovieList\";\r\n\r\ntype Query = {\r\n    title?: string;\r\n    year?: string;\r\n    type?: string;\r\n    page?: string;\r\n};\r\n\r\nconst SearchPage: React.FC = () => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const query: Query = getObjFromSearchParams(location.search);\r\n\r\n    /* default page = 1 */\r\n    const { currentData, isError } = MovieApi.useSearchFilmByTitleQuery(\r\n        {\r\n            page: 1,\r\n            ...query,\r\n        },\r\n        { skip: !Boolean(query.title) }\r\n    );\r\n\r\n    const isLoading = Boolean(query.title) && !currentData;\r\n\r\n    useLayoutEffect(() => {\r\n        window.scrollTo({ top: 0 });\r\n    }, []);\r\n\r\n    function changePageHandler(e: React.ChangeEvent<unknown>, newPage: number) {\r\n        /* Query building */\r\n        let search = location.search;\r\n        search = search.replace(`page=${query.page}`, `page=${newPage}`);\r\n        if (!search.includes(\"page\")) search += `&page=${newPage}`;\r\n\r\n        window.scrollTo({ top: 0 });\r\n        navigate(location.pathname + search);\r\n    }\r\n\r\n    function movieClickHandler(id: string) {\r\n        navigate(DESCRIPTIONROUTE.path.replace(\":id\", id));\r\n    }\r\n\r\n    /* error */\r\n    if (isError) {\r\n        return (\r\n            <Container maxWidth=\"xl\" sx={{ pt: 2, pb: 3 }}>\r\n                <Typography\r\n                    variant=\"h3\"\r\n                    sx={{ fontSize: { md: \"2.5rem\", sm: \"2rem\", xs: \"1.7rem\" }, textAlign: \"center\" }}\r\n                >\r\n                    Error!\r\n                </Typography>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container\r\n            maxWidth={false}\r\n            sx={{\r\n                pt: 2,\r\n                pb: 3,\r\n            }}\r\n        >\r\n            {/* Search module */}\r\n            <Box sx={{ mb: 2 }}>\r\n                <SearchModule isLoading={isLoading} />\r\n            </Box>\r\n\r\n            {/* Films not found */}\r\n            {currentData?.Response === \"False\" && (\r\n                <Typography\r\n                    variant=\"h3\"\r\n                    sx={{ fontSize: { md: \"2.5rem\", sm: \"2rem\", xs: \"1.7rem\" }, textAlign: \"center\" }}\r\n                >\r\n                    Films not found!\r\n                </Typography>\r\n            )}\r\n\r\n            {/* MovieList */}\r\n            {currentData?.Response === \"True\" && currentData.Search && (\r\n                <MovieList movies={currentData.Search} onMovieClick={movieClickHandler} />\r\n            )}\r\n\r\n            {currentData?.Search && (\r\n                <Pagination\r\n                    count={Math.ceil(Number(currentData?.totalResults) / 10 || 0)}\r\n                    page={query?.page ? +query.page : 1}\r\n                    onChange={changePageHandler}\r\n                    sx={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    size=\"medium\" /* Fix me */\r\n                />\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SearchPage;\r\n","export function getObjFromSearchParams(str: string): Record<string, string> {\r\n    if (!str) return {};\r\n\r\n    const result: Record<string, string> = {};\r\n\r\n    const queryArray: string[][] = str\r\n        .slice(1)\r\n        .split(\"&\")\r\n        .map((r) => r.split(\"=\"));\r\n\r\n    queryArray.forEach((queryProp) => {\r\n        result[queryProp[0]] = queryProp[1];\r\n    });\r\n\r\n    return result;\r\n}\r\n"],"names":["_ref","isLoading","_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","year","setYear","_useState5","_useState6","type","setType","navigate","useNavigate","_jsxs","Paper","sx","px","sm","xs","pt","pb","borderRadius","width","mx","position","elevation","children","Box","display","flexDirection","maxWidth","gap","component","onSubmit","e","preventDefault","length","query","obj","name","concat","slice","objToSearchParams","trim","toLowerCase","SEARCHROUTE","path","_jsx","Typography","variant","fontSize","md","textAlign","TextField","label","InputProps","onChange","target","value","autoComplete","disabled","inputMode","endAdornment","Boolean","IconButton","onClick","ClearIcon","inputProps","pattern","flexWrap","justifyContent","flexGrow","FormControl","minWidth","InputLabel","Select","MenuItem","alignItems","size","SearchIcon","CircularProgress","top","left","mt","ml","movieData","boxSizing","py","cursor","transition","transform","imdbID","src","Poster","alt","Title","style","aspectRatio","objectFit","backgroundRepeat","loading","Year","bgcolor","grey","color","orange","height","Type","toUpperCase","movies","onMovieClick","lg","map","movie","MovieItem","location","useLocation","str","result","split","r","forEach","queryProp","getObjFromSearchParams","search","_MovieApi$useSearchFi","MovieApi","useSearchFilmByTitleQuery","_objectSpread","page","skip","currentData","isError","useLayoutEffect","window","scrollTo","Container","mb","SearchModule","Response","Search","MovieList","id","DESCRIPTIONROUTE","replace","Pagination","count","Math","ceil","Number","totalResults","newPage","includes","pathname"],"sourceRoot":""}