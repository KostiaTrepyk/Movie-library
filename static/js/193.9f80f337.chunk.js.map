{"version":3,"file":"static/js/193.9f80f337.chunk.js","mappings":"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","sources":["modules/EpisodeDescriptionModule/components/Loader.tsx","modules/EpisodeDescriptionModule/EpisodeDescription.module.tsx","pages/EpisodePage/EpisodePage.tsx"],"sourcesContent":["import { Box, Divider, Skeleton, Stack } from \"@mui/material\";\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <Box sx={{ px: { md: 3, xs: 1 } }}>\r\n            {/* Title */}\r\n            <Skeleton variant=\"text\" sx={{ mx: \"auto\", width: \"min(95%, 300px)\", height: 50, mb: 1 }} />\r\n\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: { md: \"row\", xs: \"column\" },\r\n                    gap: 3,\r\n                    width: \"100%\",\r\n                }}\r\n            >\r\n                {/* img */}\r\n                <Box>\r\n                    <Skeleton\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            height: { md: \"60vh\", xs: \"500px\" },\r\n                            width: { md: \"min(35vw, 400px)\", xs: \"min(100%, 400px)\" },\r\n                            mx: \"auto\",\r\n                        }}\r\n                    />\r\n                </Box>\r\n\r\n                {/* table */}\r\n                <Stack direction={\"column\"} spacing={1} flexGrow={1} divider={<Divider />}>\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"65%\", xs: \"80%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"50%\", xs: \"85%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"60%\", xs: \"90%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"55%\", xs: \"70%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"65%\", xs: \"80%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"50%\", xs: \"90%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                    <Skeleton\r\n                        variant=\"text\"\r\n                        sx={{\r\n                            height: 35,\r\n                            width: { md: \"60%\", xs: \"60%\" },\r\n                            alignSelf: { md: \"start\", xs: \"center\" },\r\n                        }}\r\n                    />\r\n                </Stack>\r\n            </Box>\r\n\r\n            {/* Storyline */}\r\n            <Box mt={2}>\r\n                <Skeleton variant=\"text\" height={25} />\r\n                <Skeleton variant=\"text\" height={25} />\r\n                <Skeleton variant=\"text\" height={25} width={\"60%\"} />\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import { Fragment } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n    Box,\r\n    IconButton,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { motion } from \"framer-motion\";\r\nimport { LocalstorageKeys } from \"../../utils/localstorage_keys\";\r\nimport { MovieApi1 } from \"../../services/MovieApi1\";\r\n\r\nimport Loader from \"./components/Loader\";\r\n\r\n/* Icons */\r\nimport ArrowBack from \"@mui/icons-material/ArrowBackIosNew\";\r\n\r\n/* Framer motion animations */\r\nconst titleAnimation = {\r\n    hidden: {\r\n        scale: 0.95,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        scale: 1,\r\n        opacity: 1,\r\n    },\r\n};\r\nconst imgAnimation = {\r\n    hidden: {\r\n        x: -30,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        x: 0,\r\n        opacity: 1,\r\n    },\r\n};\r\nconst tableAnimation = {\r\n    hidden: {\r\n        x: 30,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        x: 0,\r\n        opacity: 1,\r\n    },\r\n};\r\nconst plotAnimation = {\r\n    hidden: {\r\n        x: -30,\r\n        opacity: 0,\r\n    },\r\n    visible: {\r\n        x: 0,\r\n        opacity: 1,\r\n    },\r\n};\r\n\r\n/* Framer motion components */\r\nconst MBox = motion(Box);\r\nconst MTypography = motion(Typography);\r\n\r\nconst isMobile = JSON.parse(localStorage.getItem(LocalstorageKeys.isMbile) || \"\");\r\n\r\ninterface EpisodeDescriptionModuleProps {\r\n    episodeId: string;\r\n}\r\n\r\nconst EpisodeDescriptionModule: React.FC<EpisodeDescriptionModuleProps> = ({ episodeId }) => {\r\n    const { currentData, isLoading } = MovieApi1.useGetEpisodeQuery(episodeId);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const tableData = [\r\n        { name: \"Released:\", value: currentData?.Released },\r\n        { name: \"Country\", value: currentData?.Country },\r\n        { name: \"Language\", value: currentData?.Language },\r\n        { name: \"Genre\", value: currentData?.Genre },\r\n        { name: \"Director\", value: currentData?.Director },\r\n        { name: \"Writer\", value: currentData?.Writer },\r\n        { name: \"Actors:\", value: currentData?.Actors },\r\n        { name: \"Rated\", value: currentData?.Rated },\r\n        { name: \"Awards\", value: currentData?.Awards },\r\n    ];\r\n\r\n    if (isLoading) {\r\n        return <Loader />;\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            {/* Title */}\r\n            <Box sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"start\" }}>\r\n                {!isMobile && (\r\n                    <IconButton onClick={() => navigate(-1)} size={\"large\"}>\r\n                        <ArrowBack />\r\n                    </IconButton>\r\n                )}\r\n\r\n                <MTypography\r\n                    initial=\"hidden\"\r\n                    whileInView=\"visible\"\r\n                    viewport={{ once: true }}\r\n                    variants={titleAnimation}\r\n                    variant=\"h4\"\r\n                    sx={{\r\n                        flexGrow: 1,\r\n                        textAlign: \"center\",\r\n                        fontSize: { md: \"3rem\", sm: \"2rem\", xs: \"1.7rem\" },\r\n                        mb: 2,\r\n                    }}\r\n                >\r\n                    {currentData?.Title || \"Title\"} ({currentData?.Year || \"year\"})\r\n                </MTypography>\r\n            </Box>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: { md: \"row\", xs: \"column\" },\r\n                    overflowX: \"hidden\" /* !!! */,\r\n                    gap: 2,\r\n                    mb: { sm: 2, xs: 0 },\r\n                    flexGrow: 1,\r\n                }}\r\n            >\r\n                <motion.img\r\n                    initial=\"hidden\"\r\n                    whileInView=\"visible\"\r\n                    viewport={{ once: true }}\r\n                    variants={imgAnimation}\r\n                    style={{\r\n                        width: \"min(100%, 400px)\",\r\n                        height: \"fit-content\",\r\n                        objectFit: \"contain\",\r\n                        borderRadius: \"8px\",\r\n                        margin: \"0 auto\",\r\n                    }}\r\n                    src={currentData?.Poster}\r\n                    alt={currentData?.Title}\r\n                    loading=\"lazy\"\r\n                />\r\n\r\n                <MBox\r\n                    initial=\"hidden\"\r\n                    whileInView=\"visible\"\r\n                    viewport={{ once: true }}\r\n                    variants={tableAnimation}\r\n                    sx={{ flexGrow: 1 }}\r\n                >\r\n                    {/* About */}\r\n                    <Typography\r\n                        variant=\"h5\"\r\n                        sx={{ textAlign: { md: \"start\", xs: \"center\" }, ml: { md: 2, xs: 0 } }}\r\n                    >\r\n                        About Film\r\n                    </Typography>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableBody>\r\n                                {tableData.map((row, index) => (\r\n                                    <Fragment key={index}>\r\n                                        {row.value && row.value !== \"N/A\" && (\r\n                                            <TableRow\r\n                                                key={index}\r\n                                                sx={{\r\n                                                    \"&:last-child td, &:last-child th\": { border: 0 },\r\n                                                }}\r\n                                            >\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {row.name}\r\n                                                </TableCell>\r\n                                                <TableCell>{row.value}</TableCell>\r\n                                            </TableRow>\r\n                                        )}\r\n                                    </Fragment>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </MBox>\r\n            </Box>\r\n\r\n            {/* Plot */}\r\n            {currentData?.Plot && currentData.Plot !== \"N/A\" && (\r\n                <MBox\r\n                    initial=\"hidden\"\r\n                    whileInView=\"visible\"\r\n                    viewport={{ once: true, margin: \"-40px\" }}\r\n                    variants={plotAnimation}\r\n                >\r\n                    <Typography variant=\"body1\">Storyline: {currentData.Plot}</Typography>\r\n                </MBox>\r\n            )}\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default EpisodeDescriptionModule;\r\n","import { useParams } from \"react-router-dom\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport { MovieApi1 } from \"../../services/MovieApi1\";\r\n\r\nimport EpisodeDescriptionModule from \"../../modules/EpisodeDescriptionModule/EpisodeDescription.module\";\r\n\r\nimport DefaultPageContainer from \"../../components/Containers/DefaultPageContainer\";\r\n\r\n/* Icons */\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBackIosNew\";\r\n\r\nconst SeriesEpisodePage: React.FC = () => {\r\n    const params = useParams<{ episodeId: string }>();\r\n\r\n    const { currentData, isError } = MovieApi1.useGetEpisodeQuery(params.episodeId || \"\");\r\n\r\n    return (\r\n        <DefaultPageContainer>\r\n            <EpisodeDescriptionModule episodeId={params.episodeId || \"\"} />\r\n            \r\n            {(currentData?.Response === \"False\" || isError) && (\r\n                <Box>\r\n                    {/* Fix me ? */}\r\n                    <Button\r\n                        size=\"small\"\r\n                        color=\"inherit\"\r\n                        onClick={() => {\r\n                            console.log(\"Fix me\");\r\n                        }}\r\n                    >\r\n                        <ArrowBackIcon sx={{ mr: 1 }} />\r\n                        <Typography variant=\"h6\">Back</Typography>\r\n                    </Button>\r\n                    <Typography variant=\"h4\" align=\"center\">\r\n                        Episode not found\r\n                    </Typography>\r\n                </Box>\r\n            )}\r\n        </DefaultPageContainer>\r\n    );\r\n};\r\n\r\nexport default SeriesEpisodePage;\r\n"],"names":["_jsxs","Box","sx","px","md","xs","children","_jsx","Skeleton","variant","mx","width","height","mb","display","flexDirection","gap","Stack","direction","spacing","flexGrow","divider","Divider","alignSelf","mt","titleAnimation","hidden","scale","opacity","visible","imgAnimation","x","tableAnimation","plotAnimation","MBox","motion","MTypography","Typography","isMobile","JSON","parse","localStorage","getItem","LocalstorageKeys","isMbile","_ref","episodeId","_MovieApi1$useGetEpis","MovieApi1","useGetEpisodeQuery","currentData","isLoading","navigate","useNavigate","tableData","name","value","Released","Country","Language","Genre","Director","Writer","Actors","Rated","Awards","Loader","justifyContent","alignItems","IconButton","onClick","size","ArrowBack","initial","whileInView","viewport","once","variants","textAlign","fontSize","sm","Title","Year","overflowX","img","style","objectFit","borderRadius","margin","src","Poster","alt","loading","ml","TableContainer","Table","TableBody","map","row","index","Fragment","TableRow","border","TableCell","component","scope","Plot","params","useParams","isError","DefaultPageContainer","EpisodeDescriptionModule","Response","Button","color","console","log","ArrowBackIcon","mr","align"],"sourceRoot":""}