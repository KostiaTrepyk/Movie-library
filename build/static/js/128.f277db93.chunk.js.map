{"version":3,"file":"static/js/128.f277db93.chunk.js","mappings":"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","sources":["modules/SearchModule/SearchModule.tsx","modules/SearchModule/helpers/objToQuery.tsx","pages/SearchPage/SearchPage.tsx"],"sourcesContent":["import {\r\n    Box,\r\n    CircularProgress,\r\n    FormControl,\r\n    IconButton,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@mui/material\";\r\n\r\n/* Icons */\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { objToQuery } from \"./helpers/objToQuery\";\r\nimport { SEARCHROUTE } from \"../../core/Router/utils/routes\";\r\n\r\ntype Props = {\r\n    isLoading?: boolean;\r\n};\r\n\r\nconst SearchModule = ({ isLoading }: Props) => {\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [year, setYear] = useState<string>(\"\");\r\n    const [type, setType] = useState<string>(\"\");\r\n\r\n    const navigate = useNavigate();\r\n\r\n    function formSubmitHandler(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        if (title.length === 0) return;\r\n\r\n        const query = objToQuery({ title: title.trim(), year, type });\r\n        navigate(SEARCHROUTE.path + \"/\" + query);\r\n    }\r\n\r\n    return (\r\n        <Paper\r\n            sx={{\r\n                px: { sm: 6, xs: 3 },\r\n                pt: { sm: 5, xs: 3 },\r\n                pb: { sm: 6, xs: 4 },\r\n                borderRadius: 2,\r\n                width: \"fit-content\",\r\n                mx: \"auto\",\r\n                position: \"relative\",\r\n            }}\r\n            elevation={5}\r\n        >\r\n            <Box\r\n                sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    maxWidth: \"450px\",\r\n                    mx: \"auto\",\r\n                    gap: { sm: 3, xs: 2 },\r\n                }}\r\n                component={\"form\"}\r\n                onSubmit={formSubmitHandler}\r\n            >\r\n                <Typography\r\n                    variant=\"body1\"\r\n                    sx={{ fontSize: { md: \"2rem\", sm: \"1.75rem\", xs: \"1.5rem\", textAlign: \"center\" } }}\r\n                >\r\n                    Let's find some Movies\r\n                </Typography>\r\n\r\n                <TextField\r\n                    type=\"search\"\r\n                    label=\"Title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(() => e.target.value)}\r\n                    autoComplete=\"off\"\r\n                    disabled={isLoading}\r\n                ></TextField>\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: \"flex\",\r\n                        flexWrap: \"wrap\",\r\n                        gap: { sm: 2, xs: 1 },\r\n                        justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        label=\"Year\"\r\n                        type=\"number\"\r\n                        value={year}\r\n                        onChange={(e) => setYear(() => e.target.value.toString())}\r\n                        sx={{ flexGrow: 1 }}\r\n                        autoComplete=\"off\"\r\n                        disabled={isLoading}\r\n                    ></TextField>\r\n                    <FormControl sx={{ flexGrow: 2, minWidth: \"90px\" }} disabled={isLoading}>\r\n                        <InputLabel>Type</InputLabel>\r\n                        <Select\r\n                            label=\"Type\"\r\n                            sx={{ px: 1 }}\r\n                            value={type}\r\n                            onChange={(e) => setType(() => e.target.value)}\r\n                        >\r\n                            <MenuItem value={\"\"}>Empty</MenuItem>\r\n                            <MenuItem value={\"movie\"}>Movie</MenuItem>\r\n                            <MenuItem value={\"series\"}>Series</MenuItem>\r\n                            <MenuItem value={\"episode\"}>Episode</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n                        <IconButton size=\"large\" type=\"submit\" disabled={isLoading}>\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n\r\n            {/* Loader */}\r\n            {isLoading && (\r\n                <CircularProgress\r\n                    size={24}\r\n                    sx={{ position: \"absolute\", top: \"50%\", left: \"50%\", mt: \"-12px\", ml: \"-12px\" }}\r\n                />\r\n            )}\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default SearchModule;\r\n","export function objToQuery(obj: Record<string, string | number>): string {\r\n    const query = \"?\" + new URLSearchParams(obj as any).toString();\r\n    return query;\r\n}\r\n","import { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { MovieApi } from \"../../services/Movie\";\r\nimport { Box, CircularProgress, Container, LinearProgress, Pagination, Typography } from \"@mui/material\";\r\nimport { DESCRIPTIONROUTE } from \"../../core/Router/utils/routes\";\r\nimport SearchModule from \"../../modules/SearchModule/SearchModule\";\r\n\r\ntype Query = {\r\n    title?: string;\r\n    year?: string;\r\n    type?: string;\r\n    page?: string;\r\n};\r\n\r\nconst SearchPage = () => {\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const query: Query = getQueryFromStr(location.search);\r\n\r\n    /* default page = 1 */\r\n    const { currentData, isError } = MovieApi.useSearchFilmByTitleQuery(\r\n        {\r\n            page: 1,\r\n            ...query,\r\n        },\r\n        { skip: !Boolean(query.title) }\r\n    );\r\n\r\n    const isLoading = !currentData && location.pathname !== \"/search\";\r\n\r\n    function changePageHandler(e: React.ChangeEvent<unknown>, newPage: number) {\r\n        /* Query building */\r\n        let search = location.search;\r\n        if (search.includes(\"page\")) {\r\n            search = search.replace(`page=${query.page}`, `page=${newPage}`);\r\n        } else {\r\n            search = search + `&page=${newPage}`;\r\n        }\r\n\r\n        navigate(location.pathname + search);\r\n    }\r\n\r\n    function movieClickHandler(id: string) {\r\n        navigate(DESCRIPTIONROUTE.path.replace(\":id\", id));\r\n    }\r\n\r\n    /* error */\r\n    if (isError) {\r\n        return (\r\n            <Container maxWidth=\"xl\" sx={{ pt: 2, pb: 3, textAlign: \"center\" }}>\r\n                <Typography variant=\"h3\" sx={{ fontSize: { md: \"2.5rem\", sm: \"2rem\", xs: \"1.7rem\" } }}>\r\n                    Error!\r\n                </Typography>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container\r\n            maxWidth=\"xl\"\r\n            sx={{\r\n                pt: 2,\r\n                pb: 3,\r\n            }}\r\n        >\r\n            {/* Search module */}\r\n            <Box sx={{ mb: 2, position: \"relative\" }}>\r\n                <SearchModule isLoading={isLoading} />\r\n            </Box>\r\n\r\n            {/* Films not found */}\r\n            {currentData?.Response === \"False\" && (\r\n                <Typography\r\n                    variant=\"h3\"\r\n                    sx={{ fontSize: { md: \"2.5rem\", sm: \"2rem\", xs: \"1.7rem\" }, textAlign: \"center\" }}\r\n                >\r\n                    Films not found!\r\n                </Typography>\r\n            )}\r\n\r\n            {/* MovieList */}\r\n            {currentData?.Response === \"True\" && (\r\n                <Box\r\n                    sx={{\r\n                        display: \"flex\",\r\n                        flexWrap: \"wrap\",\r\n                        justifyContent: \"center\",\r\n                        gap: { lg: 2, xs: 1 },\r\n                    }}\r\n                >\r\n                    {currentData.Search?.map((movie) => (\r\n                        <Box\r\n                            key={movie.imdbID}\r\n                            sx={{\r\n                                boxSizing: \"border-box\",\r\n                                px: 3,\r\n                                py: 2,\r\n                                cursor: \"pointer\",\r\n                                width: \"min(100%, 340px)\",\r\n                                transition: \"0.3s transform\",\r\n                                \"&:hover\": {\r\n                                    transform: \"scale(95%)\",\r\n                                },\r\n                            }}\r\n                            onClick={() => movieClickHandler(movie.imdbID)}\r\n                        >\r\n                            <img\r\n                                src={\r\n                                    movie.Poster !== \"N/A\"\r\n                                        ? movie.Poster\r\n                                        : \"https://thumbs.dreamstime.com/b/ikona-paska-filmu-film-programu-word-wyizolowany-na-bia%C5%82ym-tle-proste-logo-wektorowe-230410953.jpg\"\r\n                                }\r\n                                alt={movie.Title}\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                    borderRadius: \"15px 15px 10px 10px\",\r\n                                    aspectRatio: 9 / 14,\r\n                                    objectFit: \"cover\",\r\n                                    backgroundRepeat: \"no-repeat\",\r\n                                }}\r\n                                loading=\"lazy\"\r\n                            />\r\n\r\n                            <Box sx={{ display: \"flex\", textAlign: \"center\", pt: 1, gap: 2 }}>\r\n                                <Typography flexGrow={1}>\r\n                                    {movie.Title} {movie.Year}\r\n                                </Typography>\r\n                                <Typography\r\n                                    bgcolor=\"#fff2\"\r\n                                    color=\"orange\"\r\n                                    variant=\"body2\"\r\n                                    sx={{ py: 0.8, px: 1, height: \"min-content\", borderRadius: 2 }}\r\n                                >\r\n                                    {movie.Type.toUpperCase()}\r\n                                </Typography>\r\n                            </Box>\r\n                        </Box>\r\n                    ))}\r\n                </Box>\r\n            )}\r\n\r\n            {currentData?.Search && (\r\n                <Pagination\r\n                    count={Math.ceil(Number(currentData?.totalResults) / 10 || 0)}\r\n                    page={query?.page ? +query.page : 1}\r\n                    onChange={changePageHandler}\r\n                    sx={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    size=\"medium\" /* Fix me */\r\n                />\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SearchPage;\r\n\r\nfunction getQueryFromStr(str: string): Record<string, string> {\r\n    if (!str) return {};\r\n\r\n    const result: Record<string, string> = {};\r\n\r\n    const queryArray: string[][] = str\r\n        .slice(1)\r\n        .split(\"&\")\r\n        .map((r) => r.split(\"=\"));\r\n\r\n    queryArray.forEach((queryProp) => {\r\n        result[queryProp[0]] = queryProp[1];\r\n    });\r\n\r\n    return result;\r\n}\r\n"],"names":["_ref","isLoading","_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","year","setYear","_useState5","_useState6","type","setType","navigate","useNavigate","_jsxs","Paper","sx","px","sm","xs","pt","pb","borderRadius","width","mx","position","elevation","children","Box","display","flexDirection","maxWidth","gap","component","onSubmit","e","preventDefault","length","obj","query","trim","URLSearchParams","toString","SEARCHROUTE","path","_jsx","Typography","variant","fontSize","md","textAlign","TextField","label","value","onChange","target","autoComplete","disabled","flexWrap","justifyContent","flexGrow","FormControl","minWidth","InputLabel","Select","MenuItem","alignItems","IconButton","size","SearchIcon","CircularProgress","top","left","mt","ml","_currentData$Search","location","useLocation","str","result","slice","split","map","r","forEach","queryProp","getQueryFromStr","search","_MovieApi$useSearchFi","MovieApi","useSearchFilmByTitleQuery","_objectSpread","page","skip","Boolean","currentData","isError","pathname","Container","mb","SearchModule","Response","lg","Search","movie","boxSizing","py","cursor","transition","transform","onClick","id","imdbID","DESCRIPTIONROUTE","replace","src","Poster","alt","Title","style","aspectRatio","objectFit","backgroundRepeat","loading","Year","bgcolor","color","height","Type","toUpperCase","Pagination","count","Math","ceil","Number","totalResults","newPage","includes","concat"],"sourceRoot":""}