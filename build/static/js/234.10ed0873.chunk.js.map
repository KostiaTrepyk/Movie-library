{"version":3,"file":"static/js/234.10ed0873.chunk.js","mappings":"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","sources":["pages/SeriesEpisodePage/SeriesEpisodePage.tsx"],"sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport { MovieApi } from \"../../services/Movie\";\r\nimport {\r\n    Box,\r\n    Container,\r\n    LinearProgress,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport { Fragment } from \"react\";\r\n\r\n/* is not used */\r\nconst SeriesEpisodePage = () => {\r\n    const params = useParams<{ episodeId: string }>();\r\n\r\n    const { currentData, isError } = MovieApi.useGetEpisodeQuery(params.episodeId || \"\");\r\n\r\n    const tableData = [\r\n        { name: \"Released:\", value: currentData?.Released },\r\n        { name: \"Country\", value: currentData?.Country },\r\n        { name: \"Language\", value: currentData?.Language },\r\n        { name: \"Genre\", value: currentData?.Genre },\r\n        { name: \"Director\", value: currentData?.Director },\r\n        { name: \"Writer\", value: currentData?.Writer },\r\n        { name: \"Actors:\", value: currentData?.Actors },\r\n        { name: \"Rated\", value: currentData?.Rated },\r\n        { name: \"Awards\", value: currentData?.Awards },\r\n    ];\r\n\r\n    if (isError) {\r\n        return <Typography align=\"center\">Error</Typography>;\r\n    }\r\n\r\n    if (!currentData) {\r\n        return <LinearProgress />;\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"xl\" sx={{ pt: 2, pb: 3 }}>\r\n            {currentData?.Response === \"True\" && (\r\n                <Box>\r\n                    {/* Title */}\r\n                    <Typography\r\n                        variant=\"h4\"\r\n                        sx={{\r\n                            textAlign: \"center\",\r\n                            fontSize: { md: \"3rem\", sm: \"2rem\", xs: \"1.7rem\" },\r\n                            mb: 2,\r\n                        }}\r\n                    >\r\n                        {currentData?.Title || \"Title\"} ({currentData?.Year || \"year\"})\r\n                    </Typography>\r\n                    <Box\r\n                        sx={{\r\n                            display: \"flex\",\r\n                            flexDirection: { md: \"row\", xs: \"column\" },\r\n                            gap: 2,\r\n                            mb: { sm: 2, xs: 0 },\r\n                            flexGrow: 1,\r\n                        }}\r\n                    >\r\n                        <img\r\n                            style={{\r\n                                width: \"min(100%, 400px)\",\r\n                                height: \"fit-content\",\r\n                                objectFit: \"contain\",\r\n                                borderRadius: \"8px\",\r\n                                margin: \"0 auto\",\r\n                            }}\r\n                            src={currentData?.Poster}\r\n                            alt={currentData?.Title}\r\n                            loading=\"lazy\"\r\n                        />\r\n\r\n                        <Box sx={{ flexGrow: 1 }}>\r\n                            {/* About */}\r\n                            <Typography\r\n                                variant=\"h5\"\r\n                                sx={{ textAlign: { sm: \"start\", xs: \"center\" }, ml: { sm: 2, xs: 0 } }}\r\n                            >\r\n                                About Film\r\n                            </Typography>\r\n                            <TableContainer>\r\n                                <Table aria-label=\"simple table\">\r\n                                    <TableBody>\r\n                                        {tableData.map((row, index) => (\r\n                                            <Fragment key={index}>\r\n                                                {row.value && row.value !== \"N/A\" && (\r\n                                                    <TableRow\r\n                                                        key={index}\r\n                                                        sx={{\r\n                                                            \"&:last-child td, &:last-child th\": { border: 0 },\r\n                                                        }}\r\n                                                    >\r\n                                                        <TableCell component=\"th\" scope=\"row\">\r\n                                                            {row.name}\r\n                                                        </TableCell>\r\n                                                        <TableCell>{row.value}</TableCell>\r\n                                                    </TableRow>\r\n                                                )}\r\n                                            </Fragment>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    {/* Plot */}\r\n                    {currentData?.Plot && currentData.Plot !== \"N/A\" && (\r\n                        <Box>\r\n                            <Typography variant=\"body1\">Storyline: {currentData.Plot}</Typography>\r\n                        </Box>\r\n                    )}\r\n                </Box>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SeriesEpisodePage;\r\n"],"names":["params","useParams","_MovieApi$useGetEpiso","MovieApi","useGetEpisodeQuery","episodeId","currentData","isError","tableData","name","value","Released","Country","Language","Genre","Director","Writer","Actors","Rated","Awards","_jsx","Typography","align","children","Container","maxWidth","sx","pt","pb","Response","_jsxs","Box","variant","textAlign","fontSize","md","sm","xs","mb","Title","Year","display","flexDirection","gap","flexGrow","style","width","height","objectFit","borderRadius","margin","src","Poster","alt","loading","ml","TableContainer","Table","TableBody","map","row","index","Fragment","TableRow","border","TableCell","component","scope","Plot","LinearProgress"],"sourceRoot":""}